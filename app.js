const TelegramBot = require('node-telegram-bot-api');
const values = require('./values.js');
const bot = new TelegramBot(values.bot_token, { polling: true });

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
const questionsUk = require('./questions_uk.js');
const questionsEn = require('./questions_en.js');

// –ò–º–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const resultsUk = require('./results_uk.js');
const resultsEn = require('./results_en.js');

const startKeyboard = {
  reply_markup: {
    keyboard: [
      [
        { text: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' },
        { text: 'üá¨üáß English' }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

const keyboard = (questionsNumber) => {
  return [
    { text: '‚ú® A ‚ú®', callback_data: `${questionsNumber}1` },
    { text: '‚ú® B ‚ú®', callback_data: `${questionsNumber}2` },
    { text: '‚ú® C ‚ú®', callback_data: `${questionsNumber}3` },
    { text: '‚ú® D ‚ú®', callback_data: `${questionsNumber}4` }
  ];
};

const result = (A, B, C, D, chatId, language) => {
  if (!chatId) {
    console.error('chat_id is empty in result function');
    return;
  }

  const results = language === 'uk' ? resultsUk : resultsEn;

  bot.sendMessage(chatId, results.resultMessage(A, B, C, D), { parse_mode: 'Markdown' });

  const number = Math.max(A, B, C, D);
  switch (number) {
    case A:
      bot.sendMessage(chatId, results.links.A, { parse_mode: 'HTML' });
      break;
    case B:
      bot.sendMessage(chatId, results.links.B, { parse_mode: 'HTML' });
      break;
    case C:
      bot.sendMessage(chatId, results.links.C, { parse_mode: 'HTML' });
      break;
    case D:
      bot.sendMessage(chatId, results.links.D, { parse_mode: 'HTML' });
      break;
  }
};

const botLogic = async () => {
  bot.setMyCommands([{ command: '/start', description: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —â–µ —Ä–∞–∑' }]);

  let A = 0, B = 0, C = 0, D = 0;
  let currentLanguage = ''; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —è–∑—ã–∫–∞

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (msg.text === '/start') {
      bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:', startKeyboard);
    } else if (msg.text === 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞') {
      A = B = C = D = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      currentLanguage = 'uk'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
      bot.sendMessage(chatId, questionsUk.start, {
        reply_markup: { inline_keyboard: [[{ text: '‚ú® –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç ‚ú®', callback_data: 'test_start_uk' }]] },
        parse_mode: 'Markdown'
      });
    } else if (msg.text === 'üá¨üáß English') {
      A = B = C = D = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      currentLanguage = 'en'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
      bot.sendMessage(chatId, questionsEn.start, {
        reply_markup: { inline_keyboard: [[{ text: '‚ú® Start Test ‚ú®', callback_data: 'test_start_en' }]] },
        parse_mode: 'Markdown'
      });
    }
  });

  bot.on('callback_query', async (query) => {
    const action = query.data;
    const chatId = query.message.chat.id;

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    if (action === 'test_start_uk') {
      bot.sendMessage(chatId, questionsUk.first, {
        reply_markup: { inline_keyboard: [keyboard(1)] },
        parse_mode: 'Markdown'
      });
    } else if (action === 'test_start_en') {
      bot.sendMessage(chatId, questionsEn.first, {
        reply_markup: { inline_keyboard: [keyboard(1)] },
        parse_mode: 'Markdown'
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionNumber = parseInt(action.charAt(0));
    const option = parseInt(action.charAt(1));

    if (questionNumber === 1) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      if (option === 1) A++;
      else if (option === 2) B++;
      else if (option === 3) C++;
      else if (option === 4) D++;

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É
      const nextQuestion = currentLanguage === 'uk' ? questionsUk.second : questionsEn.second;
      bot.sendMessage(chatId, nextQuestion, {
        reply_markup: { inline_keyboard: [keyboard(2)] },
        parse_mode: 'Markdown'
      });
    } else if (questionNumber === 2) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      if (option === 1) A++;
      else if (option === 2) B++;
      else if (option === 3) C++;
      else if (option === 4) D++;

      // –í—ã–∑–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      result(A, B, C, D, chatId, currentLanguage);
    }
  });
};

botLogic();
